{"ast":null,"code":"import _asyncToGenerator from \"/Users/erikmattheis/Dropbox/articl/heroku/src/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"regenerator-runtime/runtime.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport TheButtonToggleHidden from '@/components/ui/TheButtonToggleHidden.vue';\nimport { setTokensInLocalStorage, setTokensInVuex, convertStringDatesToMS } from '@/services/tokenService';\nimport validateEmail from '@/services/emailValidationService';\nexport default {\n  name: 'LoginPage',\n  components: {\n    TheButtonToggleHidden: TheButtonToggleHidden\n  },\n  data: function data() {\n    return {\n      email: null,\n      emailInvalid: null,\n      password: null,\n      passwordInvalid: null,\n      showPassword: false,\n      buttonDisabled: false\n    };\n  },\n  methods: {\n    handleLoginSuccess: function handleLoginSuccess(serverResult) {\n      if (serverResult.code > 309) {\n        this.$store.dispatch('setError', serverResult);\n        return;\n      }\n\n      this.resetFormErrors();\n      var result = convertStringDatesToMS(serverResult);\n      setTokensInLocalStorage(result.data.tokens);\n      setTokensInVuex(result.data.tokens);\n\n      if (this.$route.query.redirect && this.$route.query.redirect !== '/login') {\n        this.$router.push({\n          path: this.$route.query.redirect\n        });\n      } else {\n        this.$router.push({\n          name: 'HomePage'\n        });\n      }\n    },\n    resetFormErrors: function resetFormErrors() {\n      this.errorMessage = '';\n    },\n    checkForm: function checkForm() {\n      var passed = true;\n\n      if (!validateEmail.validateEmail(this.email)) {\n        this.errorMessage = 'Please enter a valid email.';\n        passed = false;\n      } else if (this.password && this.password.length < 8) {\n        this.errorMessage = 'Passwords are at least eight characters.';\n        passed = false;\n      }\n\n      return passed;\n    },\n    submitForm: function submitForm() {\n      var _this = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (_this.checkForm() === true) {\n                  _this.buttonDisabled = true;\n\n                  _this.$http({\n                    method: 'POST',\n                    url: '/auth/login',\n                    data: {\n                      password: _this.password,\n                      email: _this.email\n                    }\n                  }).then(_this.handleLoginSuccess).catch(function (error) {\n                    _this.$store.dispatch('setError', error);\n                  }).finally(function () {\n                    _this.buttonDisabled = false;\n                  });\n                } else {\n                  _this.$store.dispatch('setError', {\n                    message: _this.errorMessage\n                  });\n                }\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }))();\n    }\n  }\n};","map":{"version":3,"mappings":"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","names":["TheButtonToggleHidden","setTokensInLocalStorage","setTokensInVuex","convertStringDatesToMS","validateEmail","name","components","data","email","emailInvalid","password","passwordInvalid","showPassword","buttonDisabled","methods","handleLoginSuccess","serverResult","code","$store","dispatch","resetFormErrors","result","tokens","$route","query","redirect","$router","push","path","errorMessage","checkForm","passed","length","submitForm","$http","method","url","then","catch","error","finally","message"],"sourceRoot":"","sources":["/Users/erikmattheis/Dropbox/articl/heroku/src/frontend/src/pages/login.vue"],"sourcesContent":["<template>\n  <article>\n    <h1>Log in</h1>\n    <form>\n      <label for=\"email\">Email</label>\n      <input\n        v-model=\"email\"\n        type=\"text\"\n        name=\"email\"\n        id=\"email\"\n        autocomplete=\"email\"\n      />\n      <label for=\"password\">Password</label>\n      <div class=\"toggle-password\">\n        <input\n          v-if=\"showPassword\"\n          v-model=\"password\"\n          type=\"text\"\n          name=\"password\"\n          id=\"password\"\n          autocomplete=\"current-password\"\n        />\n        <input\n          v-if=\"!showPassword\"\n          v-model=\"password\"\n          type=\"password\"\n          name=\"password\"\n          id=\"password\"\n          autocomplete=\"current-password\"\n        />\n        <the-button-toggle-hidden\n          class=\"togglePasswordMask\"\n          @show=\"showPassword = !showPassword\"\n        >\n        </the-button-toggle-hidden>\n      </div>\n      <button\n        type=\"submit\"\n        id=\"Login\"\n        :aria-busy=\"buttonDisabled\"\n        @click.prevent=\"submitForm()\"\n      >\n        <span v-if=\"!buttonDisabled\">Login</span>\n      </button>\n    </form>\n  </article>\n</template>\n\n<script>\nimport TheButtonToggleHidden from '@/components/ui/TheButtonToggleHidden.vue';\nimport { setTokensInLocalStorage, setTokensInVuex, convertStringDatesToMS } from '@/services/tokenService';\nimport validateEmail from '@/services/emailValidationService';\n\nexport default {\n  name: 'LoginPage',\n  components: {\n    TheButtonToggleHidden,\n  },\n  data() {\n    return {\n      email: null,\n      emailInvalid: null,\n      password: null,\n      passwordInvalid: null,\n      showPassword: false,\n      buttonDisabled: false,\n    };\n  },\n  methods: {\n    handleLoginSuccess(serverResult) {\n      if (serverResult.code > 309) {\n        this.$store.dispatch('setError', serverResult);\n        return;\n      }\n      this.resetFormErrors();\n      const result = convertStringDatesToMS(serverResult);\n      setTokensInLocalStorage(result.data.tokens);\n      setTokensInVuex(result.data.tokens);\n      if (\n        this.$route.query.redirect &&\n    this.$route.query.redirect !== '/login'\n      ) {\n        this.$router.push({\n          path: this.$route.query.redirect,\n        });\n      } else {\n        this.$router.push({\n          name: 'HomePage',\n        });\n      }\n    },\n    resetFormErrors() {\n      this.errorMessage = '';\n    },\n    checkForm() {\n      let passed = true;\n      if (!validateEmail.validateEmail(this.email)) {\n        this.errorMessage = 'Please enter a valid email.';\n        passed = false;\n      } else if (this.password && this.password.length < 8) {\n        this.errorMessage = 'Passwords are at least eight characters.';\n        passed = false;\n      }\n      return passed;\n    },\n    async submitForm() {\n      if (this.checkForm() === true) {\n        this.buttonDisabled = true;\n        this.$http({\n          method: 'POST',\n          url: '/auth/login',\n          data: {\n            password: this.password,\n            email: this.email,\n          },\n        })\n          .then(this.handleLoginSuccess)\n\n          .catch((error) => {\n            this.$store.dispatch('setError', error);\n          })\n          .finally(() => {\n            this.buttonDisabled = false;\n          });\n      } else {\n        this.$store.dispatch('setError', {\n          message: this.errorMessage,\n        });\n      }\n    },\n\n  },\n};\n</script>\n\n<style scoped>\n.toggle-password {\n  position: relative;\n}\n\n.togglePasswordMask {\n  position: absolute;\n  right: 1rem;\n  top: 40%;\n  transform: translateY(-40%);\n  cursor: pointer;\n  height: 2.2rem;\n  width: 2.2rem;\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}