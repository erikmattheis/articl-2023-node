{"ast":null,"code":"import { createElementVNode as _createElementVNode, vModelText as _vModelText, withDirectives as _withDirectives, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, withModifiers as _withModifiers, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\n\nconst _withScopeId = n => (_pushScopeId(\"data-v-c40149d6\"), n = n(), _popScopeId(), n);\n\nconst _hoisted_1 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"h1\", null, \"Log in\", -1\n/* HOISTED */\n));\n\nconst _hoisted_2 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"email\"\n}, \"Email\", -1\n/* HOISTED */\n));\n\nconst _hoisted_3 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"password\"\n}, \"Password\", -1\n/* HOISTED */\n));\n\nconst _hoisted_4 = {\n  class: \"toggle-password\"\n};\nconst _hoisted_5 = [\"aria-busy\"];\nconst _hoisted_6 = {\n  key: 0\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_the_button_toggle_hidden = _resolveComponent(\"the-button-toggle-hidden\");\n\n  return _openBlock(), _createElementBlock(\"article\", null, [_hoisted_1, _createElementVNode(\"form\", null, [_hoisted_2, _withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.email = $event),\n    type: \"text\",\n    name: \"email\",\n    id: \"email\",\n    autocomplete: \"email\"\n  }, null, 512\n  /* NEED_PATCH */\n  ), [[_vModelText, $data.email]]), _hoisted_3, _createElementVNode(\"div\", _hoisted_4, [$data.showPassword ? _withDirectives((_openBlock(), _createElementBlock(\"input\", {\n    key: 0,\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $data.password = $event),\n    type: \"text\",\n    name: \"password\",\n    id: \"password\",\n    autocomplete: \"current-password\"\n  }, null, 512\n  /* NEED_PATCH */\n  )), [[_vModelText, $data.password]]) : _createCommentVNode(\"v-if\", true), !$data.showPassword ? _withDirectives((_openBlock(), _createElementBlock(\"input\", {\n    key: 1,\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => $data.password = $event),\n    type: \"password\",\n    name: \"password\",\n    id: \"password\",\n    autocomplete: \"current-password\"\n  }, null, 512\n  /* NEED_PATCH */\n  )), [[_vModelText, $data.password]]) : _createCommentVNode(\"v-if\", true), _createVNode(_component_the_button_toggle_hidden, {\n    class: \"togglePasswordMask\",\n    onShow: _cache[3] || (_cache[3] = $event => $data.showPassword = !$data.showPassword)\n  })]), _createElementVNode(\"button\", {\n    type: \"submit\",\n    id: \"Login\",\n    \"aria-busy\": $data.buttonDisabled,\n    onClick: _cache[4] || (_cache[4] = _withModifiers($event => $options.submitForm(), [\"prevent\"]))\n  }, [!$data.buttonDisabled ? (_openBlock(), _createElementBlock(\"span\", _hoisted_6, \"Login\")) : _createCommentVNode(\"v-if\", true)], 8\n  /* PROPS */\n  , _hoisted_5)])]);\n}","map":{"version":3,"mappings":";;;;gEAEIA,oBAAe,IAAf,EAAe,IAAf,EAAI,QAAJ,EAAU;AAAA;AAAV;;gEAEEA,oBAAgC,OAAhC,EAAgC;AAAzBC,KAAG,EAAC;AAAqB,CAAhC,EAAmB,OAAnB,EAAwB;AAAA;AAAxB;;gEAQAD,oBAAsC,OAAtC,EAAsC;AAA/BC,KAAG,EAAC;AAA2B,CAAtC,EAAsB,UAAtB,EAA8B;AAAA;AAA9B;;;AACKC,OAAK,EAAC;;;;;;;;;uBAZfC,oBA4CU,SA5CV,EA4CU,IA5CV,EA4CU,CA3CRC,UA2CQ,EA1CRJ,oBAyCO,MAzCP,EAyCO,IAzCP,EAyCO,CAxCLK,UAwCK,kBAvCLL,oBAME,OANF,EAME;+DALSM,cAAKC,OAKd;AAJAC,QAAI,EAAC,MAIL;AAHAC,QAAI,EAAC,OAGL;AAFAC,MAAE,EAAC,OAEH;AADAC,gBAAY,EAAC;AACb,GANF;;AAAA,oBACWL,cAsCN,EAhCLM,UAgCK,EA/BLZ,oBAsBM,KAtBN,cAsBM,CApBIM,oDADRH,oBAOE,OAPF,EAOE;UAAA;+DALSG,iBAAQC,OAKjB;AAJAC,QAAI,EAAC,MAIL;AAHAC,QAAI,EAAC,UAGL;AAFAC,MAAE,EAAC,UAEH;AADAC,gBAAY,EAAC;AACb,GAPF;;AAAA,qBAEWL,qDAmBP,GAZKA,oDADTH,oBAOE,OAPF,EAOE;UAAA;+DALSG,iBAAQC,OAKjB;AAJAC,QAAI,EAAC,UAIL;AAHAC,QAAI,EAAC,UAGL;AAFAC,MAAE,EAAC,UAEH;AADAC,gBAAY,EAAC;AACb,GAPF;;AAAA,qBAEWL,qDAWP,EALJO,aAI2BC,mCAJ3B,EAI2B;AAHzBZ,SAAK,EAAC,oBAGmB;AAFxBa,UAAI,sCAAET,qBAAY,CAAIA,kBAAlB;AAEoB,GAJ3B,CAKI,CAtBN,CA+BK,EARLN,oBAOS,QAPT,EAOS;AANPQ,QAAI,EAAC,QAME;AALPE,MAAE,EAAC,OAKI;AAJN,iBAAWJ,oBAIL;AAHNU,WAAK,qDAAUC,qBAAV,EAAoB,WAApB;AAGC,GAPT,IAMeX,sCAAbH,oBAAyC,MAAzC,EAAyCe,UAAzC,EAA6B,OAA7B,uCANF;;AAAA,eAQK,CAzCP,CA0CQ,CA5CV","names":["_createElementVNode","for","class","_createElementBlock","_hoisted_1","_hoisted_2","$data","$event","type","name","id","autocomplete","_hoisted_3","_createVNode","_component_the_button_toggle_hidden","onShow","onClick","$options","_hoisted_6"],"sourceRoot":"","sources":["/Users/erikmattheis/Dropbox/articl/heroku/src/frontend/src/pages/login.vue"],"sourcesContent":["<template>\n  <article>\n    <h1>Log in</h1>\n    <form>\n      <label for=\"email\">Email</label>\n      <input\n        v-model=\"email\"\n        type=\"text\"\n        name=\"email\"\n        id=\"email\"\n        autocomplete=\"email\"\n      />\n      <label for=\"password\">Password</label>\n      <div class=\"toggle-password\">\n        <input\n          v-if=\"showPassword\"\n          v-model=\"password\"\n          type=\"text\"\n          name=\"password\"\n          id=\"password\"\n          autocomplete=\"current-password\"\n        />\n        <input\n          v-if=\"!showPassword\"\n          v-model=\"password\"\n          type=\"password\"\n          name=\"password\"\n          id=\"password\"\n          autocomplete=\"current-password\"\n        />\n        <the-button-toggle-hidden\n          class=\"togglePasswordMask\"\n          @show=\"showPassword = !showPassword\"\n        >\n        </the-button-toggle-hidden>\n      </div>\n      <button\n        type=\"submit\"\n        id=\"Login\"\n        :aria-busy=\"buttonDisabled\"\n        @click.prevent=\"submitForm()\"\n      >\n        <span v-if=\"!buttonDisabled\">Login</span>\n      </button>\n    </form>\n  </article>\n</template>\n\n<script>\nimport TheButtonToggleHidden from '@/components/ui/TheButtonToggleHidden.vue';\nimport { setTokensInLocalStorage, setTokensInVuex, convertStringDatesToMS } from '@/services/tokenService';\nimport validateEmail from '@/services/emailValidationService';\n\nexport default {\n  name: 'LoginPage',\n  components: {\n    TheButtonToggleHidden,\n  },\n  data() {\n    return {\n      email: null,\n      emailInvalid: null,\n      password: null,\n      passwordInvalid: null,\n      showPassword: false,\n      buttonDisabled: false,\n    };\n  },\n  methods: {\n    handleLoginSuccess(serverResult) {\n      if (serverResult.code > 309) {\n        this.$store.dispatch('setError', serverResult);\n        return;\n      }\n      this.resetFormErrors();\n      const result = convertStringDatesToMS(serverResult);\n      setTokensInLocalStorage(result.data.tokens);\n      setTokensInVuex(result.data.tokens);\n      if (\n        this.$route.query.redirect &&\n    this.$route.query.redirect !== '/login'\n      ) {\n        this.$router.push({\n          path: this.$route.query.redirect,\n        });\n      } else {\n        this.$router.push({\n          name: 'HomePage',\n        });\n      }\n    },\n    resetFormErrors() {\n      this.errorMessage = '';\n    },\n    checkForm() {\n      let passed = true;\n      if (!validateEmail.validateEmail(this.email)) {\n        this.errorMessage = 'Please enter a valid email.';\n        passed = false;\n      } else if (this.password && this.password.length < 8) {\n        this.errorMessage = 'Passwords are at least eight characters.';\n        passed = false;\n      }\n      return passed;\n    },\n    async submitForm() {\n      if (this.checkForm() === true) {\n        this.buttonDisabled = true;\n        this.$http({\n          method: 'POST',\n          url: '/auth/login',\n          data: {\n            password: this.password,\n            email: this.email,\n          },\n        })\n          .then(this.handleLoginSuccess)\n\n          .catch((error) => {\n            this.$store.dispatch('setError', error);\n          })\n          .finally(() => {\n            this.buttonDisabled = false;\n          });\n      } else {\n        this.$store.dispatch('setError', {\n          message: this.errorMessage,\n        });\n      }\n    },\n\n  },\n};\n</script>\n\n<style scoped>\n.toggle-password {\n  position: relative;\n}\n\n.togglePasswordMask {\n  position: absolute;\n  right: 1rem;\n  top: 40%;\n  transform: translateY(-40%);\n  cursor: pointer;\n  height: 2.2rem;\n  width: 2.2rem;\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}