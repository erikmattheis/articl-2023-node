{"ast":null,"code":"import \"core-js/modules/es.json.stringify.js\";\nimport store from '@/store/index';\nimport localStorageService from '@/services/localStorageService';\nexport function getAccessTokenExpires() {\n  var accessTokenExpires = store.getters.accessTokenExpires;\n\n  if (!accessTokenExpires) {\n    accessTokenExpires = localStorageService.get('accessTokenExpires');\n\n    if (accessTokenExpires) {\n      store.dispatch('accessTokenExpires', accessTokenExpires);\n    }\n  }\n\n  return accessTokenExpires;\n}\nexport function getAccessTokenValue() {\n  var accessTokenValue = store.getters.accessTokenValue;\n\n  if (!accessTokenValue) {\n    accessTokenValue = localStorageService.get('accessTokenValue');\n\n    if (accessTokenValue) {\n      store.dispatch('accessTokenValue', accessTokenValue);\n    }\n  }\n\n  return accessTokenValue;\n}\nexport function getRefreshTokenExpires() {\n  var refreshTokenExpires = store.getters.refreshTokenExpires;\n\n  if (!refreshTokenExpires) {\n    refreshTokenExpires = localStorageService.get('refreshTokenExpires');\n\n    if (refreshTokenExpires) {\n      store.dispatch('refreshTokenExpires', refreshTokenExpires);\n    }\n  }\n\n  return refreshTokenExpires;\n}\nexport function getRefreshTokenValue() {\n  var refreshTokenValue = store.getters.refreshTokenValue;\n\n  if (!refreshTokenValue) {\n    refreshTokenValue = localStorageService.get('refreshTokenValue');\n\n    if (refreshTokenValue) {\n      store.dispatch('refreshTokenValue', refreshTokenValue);\n    }\n  }\n\n  return refreshTokenValue;\n}\nexport function setTokensInVuex(val) {\n  var _val$access;\n\n  if (val !== null && val !== void 0 && (_val$access = val.access) !== null && _val$access !== void 0 && _val$access.token) {\n    store.dispatch('accessTokenValue', val.access.token);\n    store.dispatch('accessTokenExpires', val.access.expires);\n    store.dispatch('refreshTokenValue', val.refresh.token);\n    store.dispatch('refreshTokenExpires', val.refresh.expires);\n  }\n}\nexport function setTokensInLocalStorage(val) {\n  var _val$access2;\n\n  if (val !== null && val !== void 0 && (_val$access2 = val.access) !== null && _val$access2 !== void 0 && _val$access2.token) {\n    // console.log('setting expires in local storage', val.access.expires);\n    localStorageService.set('accessTokenValue', val.access.token);\n    localStorageService.set('accessTokenExpires', val.access.expires);\n    localStorageService.set('refreshTokenValue', val.refresh.token);\n    localStorageService.set('refreshTokenExpires', val.refresh.expires);\n  }\n}\nexport function convertStringDatesToMS(serverResult) {\n  var _serverResult$data;\n\n  if (serverResult !== null && serverResult !== void 0 && (_serverResult$data = serverResult.data) !== null && _serverResult$data !== void 0 && _serverResult$data.tokens) {\n    var result = JSON.parse(JSON.stringify(serverResult));\n    result.data.tokens.access.expires = Date.parse(result.data.tokens.access.expires);\n    result.data.tokens.refresh.expires = Date.parse(result.data.tokens.refresh.expires);\n    return result;\n  }\n\n  return {};\n}","map":{"version":3,"sources":["/Users/erikmattheis/Dropbox/articl/heroku/src/frontend/src/services/tokenService.js"],"names":["store","localStorageService","getAccessTokenExpires","accessTokenExpires","getters","get","dispatch","getAccessTokenValue","accessTokenValue","getRefreshTokenExpires","refreshTokenExpires","getRefreshTokenValue","refreshTokenValue","setTokensInVuex","val","access","token","expires","refresh","setTokensInLocalStorage","set","convertStringDatesToMS","serverResult","data","tokens","result","JSON","parse","stringify","Date"],"mappings":"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","sourcesContent":["import store from '@/store/index';\nimport localStorageService from '@/services/localStorageService';\n\nexport function getAccessTokenExpires() {\n  let { accessTokenExpires } = store.getters;\n  if (!accessTokenExpires) {\n    accessTokenExpires = localStorageService.get('accessTokenExpires');\n    if (accessTokenExpires) {\n      store.dispatch('accessTokenExpires', accessTokenExpires);\n    }\n  }\n  return accessTokenExpires;\n}\n\nexport function getAccessTokenValue() {\n  let { accessTokenValue } = store.getters;\n  if (!accessTokenValue) {\n    accessTokenValue = localStorageService.get('accessTokenValue');\n    if (accessTokenValue) {\n      store.dispatch('accessTokenValue', accessTokenValue);\n    }\n  }\n  return accessTokenValue;\n}\n\nexport function getRefreshTokenExpires() {\n  let { refreshTokenExpires } = store.getters;\n  if (!refreshTokenExpires) {\n    refreshTokenExpires = localStorageService.get('refreshTokenExpires');\n    if (refreshTokenExpires) {\n      store.dispatch('refreshTokenExpires', refreshTokenExpires);\n    }\n  }\n  return refreshTokenExpires;\n}\n\nexport function getRefreshTokenValue() {\n  let { refreshTokenValue } = store.getters;\n  if (!refreshTokenValue) {\n    refreshTokenValue = localStorageService.get('refreshTokenValue');\n    if (refreshTokenValue) {\n      store.dispatch('refreshTokenValue', refreshTokenValue);\n    }\n  }\n  return refreshTokenValue;\n}\n\nexport function setTokensInVuex(val) {\n  if (val?.access?.token) {\n    store.dispatch('accessTokenValue', val.access.token);\n    store.dispatch('accessTokenExpires', val.access.expires);\n    store.dispatch('refreshTokenValue', val.refresh.token);\n    store.dispatch('refreshTokenExpires', val.refresh.expires);\n  }\n}\n\nexport function setTokensInLocalStorage(val) {\n  if (val?.access?.token) {\n    // console.log('setting expires in local storage', val.access.expires);\n    localStorageService.set('accessTokenValue', val.access.token);\n    localStorageService.set('accessTokenExpires', val.access.expires);\n    localStorageService.set('refreshTokenValue', val.refresh.token);\n    localStorageService.set('refreshTokenExpires', val.refresh.expires);\n  }\n}\n\nexport function convertStringDatesToMS(serverResult) {\n  if (serverResult?.data?.tokens) {\n    const result = JSON.parse(JSON.stringify(serverResult));\n    result.data.tokens.access.expires = Date.parse(result.data.tokens.access.expires);\n    result.data.tokens.refresh.expires = Date.parse(result.data.tokens.refresh.expires);\n    return result;\n  }\n  return {};\n}\n"]},"metadata":{},"sourceType":"module"}