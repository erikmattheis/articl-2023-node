{"ast":null,"code":"import _asyncToGenerator from \"/Users/erikmattheis/Dropbox/articl/heroku/src/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"regenerator-runtime/runtime.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.match.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport TheButtonToggleHidden from '@/components/ui/TheButtonToggleHidden.vue';\nexport default {\n  name: 'UserPage',\n  components: {\n    TheButtonToggleHidden: TheButtonToggleHidden\n  },\n  data: function data() {\n    return {\n      id: '',\n      nameFirst: '',\n      nameLast: '',\n      institution: '',\n      education: '',\n      email: null,\n      emailInvalid: null,\n      password: null,\n      passwordInvalid: null,\n      showPassword: false,\n      password2: null,\n      passwordInvalid2: null,\n      showPassword2: false,\n      newPassword: null,\n      newPasswordInvalid: null,\n      showNewPassword: false,\n      newPassword2: null,\n      newPasswordInvalid2: null,\n      showNewPassword2: false,\n      buttonDisabled: false,\n      buttonDisabled2: false,\n      passwordMismatch: false,\n      success: null,\n      result: null\n    };\n  },\n  mounted: function mounted() {\n    var id;\n\n    if (this.$route.params.userId) {\n      id = this.$route.params.userId;\n    } else if (this.$state.getters.userId) {\n      id = this.$state.getters.userId;\n    } else {\n      throw new Error('You must have an account to view others.');\n    }\n\n    this.getUser(id);\n  },\n  methods: {\n    resetUserForm: function resetUserForm() {\n      this.emailInvalid = null;\n      this.success = null;\n      this.result = null;\n    },\n    checkUserForm: function checkUserForm() {\n      var passed = true;\n\n      if (!this.validateEmail(this.email)) {\n        this.emailInvalid = true;\n        passed = false;\n      }\n\n      return passed;\n    },\n    checkPasswordForm: function checkPasswordForm() {\n      var passed = true;\n\n      if (!this.validatePassword(this.newPassword)) {\n        this.passwordInvalid = true;\n        passed = false;\n      }\n\n      if (!this.validatePassword(this.newPassword2)) {\n        this.passwordInvalid2 = true;\n        passed = false;\n      }\n\n      if (this.password !== this.newPassword2) {\n        this.passwordMismatch = true;\n        passed = false;\n      }\n\n      return passed;\n    },\n    validateEmail: function validateEmail(email) {\n      return email.match( // eslint-disable-next-line\n      /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n    },\n    validatePassword: function validatePassword(password) {\n      return password.match(/^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d]{8,}$/);\n    },\n    getUser: function getUser(id) {\n      var _this = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (id) {\n                  _this.$http({\n                    method: 'GET',\n                    url: \"/users/\".concat(id)\n                  }).then(function (result) {\n                    if (result.data) {\n                      _this.success = true;\n                      _this.result = result.data;\n                    }\n                  }).catch(function (error) {\n                    _this.$store.dispatch('setError', error);\n                  }).finally(function () {\n                    _this.buttonDisabled = false;\n                  });\n                }\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }))();\n    },\n    submitPasswordForm: function submitPasswordForm() {\n      var _this2 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n        var token;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                token = _this2.$route.query.token;\n\n                if (_this2.checkPasswordForm() === true) {\n                  _this2.buttonDisabled = true;\n\n                  _this2.$http({\n                    method: 'POST',\n                    url: '/auth/reset-password',\n                    data: {\n                      token: token,\n                      password: _this2.password\n                    }\n                  }).then(function () {\n                    _this2.result = 'You have successfully changed your password.';\n                  }).catch(function (error) {\n                    _this2.dataInvalid = true;\n\n                    _this2.$store.dispatch('setError', error);\n                  }).finally(function () {\n                    _this2.buttonDisabled = false;\n                  });\n                }\n\n              case 2:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }))();\n    }\n  }\n};","map":{"version":3,"mappings":"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","names":["TheButtonToggleHidden","name","components","data","id","nameFirst","nameLast","institution","education","email","emailInvalid","password","passwordInvalid","showPassword","password2","passwordInvalid2","showPassword2","newPassword","newPasswordInvalid","showNewPassword","newPassword2","newPasswordInvalid2","showNewPassword2","buttonDisabled","buttonDisabled2","passwordMismatch","success","result","mounted","$route","params","userId","$state","getters","Error","getUser","methods","resetUserForm","checkUserForm","passed","validateEmail","checkPasswordForm","validatePassword","match","$http","method","url","then","catch","error","$store","dispatch","finally","submitPasswordForm","token","query","dataInvalid"],"sourceRoot":"","sources":["/Users/erikmattheis/Dropbox/articl/heroku/src/frontend/src/pages/users/index.vue"],"sourcesContent":["<template>\n  <form>\n    <article>\n      <fieldset class=\"grid\">\n        <div>\n          <label for=\"nameFirst\">First Name</label>\n          <input\n            v-model=\"nameFirst\"\n            type=\"text\"\n            name=\"nameFirst\"\n            id=\"nameFirst\"\n            autocomplete=\"given-name\"\n          />\n        </div>\n        <div>\n          <label for=\"nameLast\">Last Name</label>\n          <input\n            v-model=\"nameLast\"\n            type=\"text\"\n            name=\"nameLast\"\n            id=\"nameLast\"\n            autocomplete=\"family-name\"\n          />\n        </div>\n      </fieldset>\n      <label for=\"email\">Email</label>\n      <input\n        v-model=\"email\"\n        type=\"text\"\n        name=\"email\"\n        id=\"email\"\n        autocomplete=\"email\"\n      />\n      <label for=\"institution\">Institution</label>\n      <input\n        v-model=\"institution\"\n        type=\"text\"\n        name=\"institution\"\n        id=\"institution\"\n      />\n      <label for=\"education\">Education</label>\n      <input\n        v-model=\"education\"\n        type=\"text\"\n        name=\"education\"\n        id=\"education\"\n      />\n      <button\n        type=\"submit\"\n        id=\"Login\"\n        :aria-busy=\"buttonDisabled\"\n        @click.prevent=\"submitUserForm()\"\n      >\n        <span v-if=\"!buttonDisabled\">Save Changes</span>\n      </button>\n\n    </article>\n    <article>\n      <label for=\"password\">Current Password</label>\n      <div class=\"toggle-password\">\n        <input\n          v-if=\"showPassword\"\n          v-model=\"password\"\n          type=\"text\"\n          name=\"password\"\n          id=\"password\"\n          autocomplete=\"current-password\"\n        />\n        <input\n          v-if=\"!showPassword\"\n          v-model=\"password\"\n          type=\"password\"\n          name=\"password\"\n          id=\"password\"\n          autocomplete=\"current-password\"\n        />\n        <the-button-toggle-hidden\n          class=\"togglePasswordMask\"\n          @show=\"showPassword = !showPassword\"\n        ></the-button-toggle-hidden>\n      </div>\n      <label for=\"newPassword\">New Password</label>\n      <div class=\"toggle-password\">\n        <input\n          v-if=\"showNewPassword\"\n          v-model=\"newPassword\"\n          type=\"text\"\n          name=\"newPassword\"\n          id=\"newPassword\"\n          autocomplete=\"new-password\"\n        />\n        <input\n          v-if=\"!showNewPassword\"\n          v-model=\"newPassword\"\n          type=\"password\"\n          name=\"newPassword\"\n          id=\"newPassword\"\n          autocomplete=\"new-password\"\n        />\n        <the-button-toggle-hidden\n          class=\"togglePasswordMask\"\n          @show=\"showNewPassword = !showNewPassword\"\n        ></the-button-toggle-hidden>\n      </div>\n      <label for=\"password2\">Confirm Password</label>\n      <div class=\"toggle-password\">\n        <input\n          v-if=\"showNewPassword2\"\n          v-model=\"newPassword2\"\n          type=\"text\"\n          name=\"newPassword2\"\n          id=\"newPassword2\"\n          autocomplete=\"new-password\"\n        />\n        <input\n          v-if=\"!showPassword2\"\n          v-model=\"newPassword2\"\n          type=\"password\"\n          name=\"newPassword2\"\n          id=\"newPassword2\"\n          autocomplete=\"new-password\"\n        />\n        <the-button-toggle-hidden\n          class=\"togglePasswordMask\"\n          @show=\"showNewPassword2 = !showNewPassword2\"\n        ></the-button-toggle-hidden>\n      </div>\n      <div v-if=\"newPasswordInvalid\"></div>\n      <button\n        type=\"submit\"\n        id=\"passwordButton\"\n        :aria-busy=\"buttonDisabled2\"\n        @click.prevent=\"submitPasswordForm()\"\n      >\n        <span v-if=\"!buttonDisabled2\">Update Password</span>\n      </button>\n      <p\n        v-if=\"result\"\n        class=\"invalid\"\n      >{{ result }}</p>\n\n      <p v-if=\"success\">\n        Please verify your email address by following the instructions sent to\n        {{ email }}.\n      </p>\n    </article>\n  </form>\n</template>\n\n<script>\nimport TheButtonToggleHidden from '@/components/ui/TheButtonToggleHidden.vue';\n\nexport default {\n  name: 'UserPage',\n  components: {\n    TheButtonToggleHidden,\n  },\n  data() {\n    return {\n      id: '',\n      nameFirst: '',\n      nameLast: '',\n      institution: '',\n      education: '',\n      email: null,\n      emailInvalid: null,\n      password: null,\n      passwordInvalid: null,\n      showPassword: false,\n      password2: null,\n      passwordInvalid2: null,\n      showPassword2: false,\n      newPassword: null,\n      newPasswordInvalid: null,\n      showNewPassword: false,\n      newPassword2: null,\n      newPasswordInvalid2: null,\n      showNewPassword2: false,\n      buttonDisabled: false,\n      buttonDisabled2: false,\n      passwordMismatch: false,\n      success: null,\n      result: null,\n    };\n  },\n  mounted() {\n    let id;\n    if (this.$route.params.userId) {\n      id = this.$route.params.userId;\n    } else if (this.$state.getters.userId) {\n      id = this.$state.getters.userId;\n    } else {\n      throw new Error('You must have an account to view others.');\n    }\n\n    this.getUser(id);\n  },\n  methods: {\n    resetUserForm() {\n      this.emailInvalid = null;\n      this.success = null;\n      this.result = null;\n    },\n    checkUserForm() {\n      let passed = true;\n      if (!this.validateEmail(this.email)) {\n        this.emailInvalid = true;\n        passed = false;\n      }\n      return passed;\n    },\n    checkPasswordForm() {\n      let passed = true;\n      if (!this.validatePassword(this.newPassword)) {\n        this.passwordInvalid = true;\n        passed = false;\n      }\n      if (!this.validatePassword(this.newPassword2)) {\n        this.passwordInvalid2 = true;\n        passed = false;\n      }\n      if (this.password !== this.newPassword2) {\n        this.passwordMismatch = true;\n        passed = false;\n      }\n      return passed;\n    },\n    validateEmail(email) {\n      return email.match(\n        // eslint-disable-next-line\n        /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n      );\n    },\n    validatePassword(password) {\n      return password.match(/^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d]{8,}$/);\n    },\n    async getUser(id) {\n      if (id) {\n        this.$http({\n          method: 'GET',\n          url: `/users/${id}`,\n        })\n          .then((result) => {\n            if (result.data) {\n              this.success = true;\n              this.result = result.data;\n            }\n          })\n          .catch((error) => {\n            this.$store.dispatch('setError', error);\n          })\n          .finally(() => {\n            this.buttonDisabled = false;\n          });\n      }\n    },\n    async submitPasswordForm() {\n      const { token } = this.$route.query;\n      if (this.checkPasswordForm() === true) {\n        this.buttonDisabled = true;\n        this.$http({\n          method: 'POST',\n          url: '/auth/reset-password',\n          data: {\n            token,\n            password: this.password,\n          },\n        })\n          .then(() => {\n            this.result = 'You have successfully changed your password.';\n          })\n\n          .catch((error) => {\n            this.dataInvalid = true;\n            this.$store.dispatch('setError', error);\n          })\n          .finally(() => {\n            this.buttonDisabled = false;\n          });\n      }\n    },\n  },\n};\n</script>\n\n<style scoped>\n.toggle-password {\n  position: relative;\n}\n\n.togglePasswordMask {\n  position: absolute;\n  right: 1rem;\n  top: 40%;\n  transform: translateY(-40%);\n  cursor: pointer;\n  height: 2.2rem;\n  width: 2.2rem;\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}